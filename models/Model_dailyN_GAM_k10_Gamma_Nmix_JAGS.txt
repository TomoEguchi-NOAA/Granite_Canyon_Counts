# N mixture gray whale model in jags 
# In this version, I try to replace normal/spline models to 
# GAM with the gamma family and basis dimension (k) = 10. 

# Tomo Eguchi
# 2022-04-21


model{ 
  
  # count i
  # station (Trailer) s
  # year t
    
  ### Linking Lambda from N Mixture to Common Model
   
  # Below mirrors John's code, indexing lambda by periods instead of by days, with the reference vector to link it to the appropriate model day
  for(t in 1:n.year){
    for(j in 1:(periods[t]+2)){
                      
        # the gam model:
        log(lambda[j,t]) <- log(Watch.Length[j,t]) + log(gam.fit[day[j,t],t]) 

    }#j
  }#t
  
  ### N Mixture process
  
  for(t in 1:n.year){
    for(j in 1:periods[t]){ # NOT periods + 2 because those day 1 & 90 anchor points are fixed, 
                            # so N shouldn't be estimated for those, only for the days with true watch periods
      for(s in 1:n.station){
      
        # N mixture model - two observations of 'true' N (passing whales), with different observation probabilities
        n[j,s,t] ~ dbin(obs.prob[j,s,t], N[j,t]) 

      }#s    
    }#j
  }#t

  for(t in 1:n.year){
    for(j in 1:(periods[t]+2)){ #periods + 2 to include the added anchor points of 0 whales at days 1 and 90

      # Replicate John's code:
      # Then, the 'true' N's for each period is distributed around a poisson mean whales per watch (lambda)
      
      N[j,t] ~ dpois(lambda[j,t]) 

    }#j
  }#t
  
  ### Observation probability
  for(t in 1:n.year){
    for(j in 1:periods[t]){
      for(s in 1:n.station){

        # Final obs prob = observer 1/0 * 
        #                (base obs prob + BF on/off * Fixed effect of BF * BF + 
        #                 VS on/off * Fixed effect of VS * VS    + 
        #                Obs effect on/off * Random effect of observer)

        # The below replicates Durban et al 2016 code:
        logit(prob[j,s,t]) <- logit(mean.prob) + (BF.Switch * BF.Fixed * bf[j,t]) + (VS.Switch * VS.Fixed * vs[j,t]) + (OBS.Switch * OBS.RF[obs[j,s,t]])

        # the u data is whether there were observers on watch. 
        # 0 counts are often associated with years/shifts with 
        # no second observer. So if u=0, it will fix observation probability at 0
        obs.prob[j,s,t] <- u[j,s,t] * prob[j,s,t]
                
      }#s
    }#j
  }#t
  
  # Flat prior for mean.prob
  mean.prob ~ dunif(0,1)
  
  ### Specification of terms within observation probability linear model
  
  ## Observer random effect
  for(o in 1:n.obs){
    OBS.RF[o] ~ dnorm(0,tau.Obs)
  }#o
  
  #Uninformative prior for tau.Obs
  sigma.Obs ~ dunif(0,2)
  tau.Obs <- pow(sigma.Obs,-2)
       
  OBS.Switch ~ dbern(0.5)
  
  ## Beaufort
  BF.Switch ~ dbern(0.5) #uninformative prior for the BF.Switch, which determines whether to include the effect of beaufort conditions (multiply by 0 or 1)
  
  #Below is the single fixed effect multiplied by BF rating in the updated obs prob equation:
  BF.Fixed ~ dnorm(0,0.01)
  
  ## Visibility
  VS.Switch ~ dbern(0.5) #uninformative prior for the VS.Switch
    
  #Below is the single fixed effect multiplied by VS rating in the updated obs prob equation:
  VS.Fixed ~ dnorm(0,0.01)
  
  ### Seasonal Curve (GAM)  - output of jagam
  # This section is run outside of this script first to create
  # the design matrix and a new predictor matrix that include
  # all dates for all years. 

  # X is the design matrix for y ~ s(days, by = year, k) with Gaussian family
  # y is the 'observed' daily counts = counts/effort (in unit of days)
  ## expected response
  mu <- X %*% b 

  # n.data is the number of data points - no NAs.
  ## response
  for (i in 1:n.data) { 
    #y[i] ~ dnorm(mu[i], tau.daily.N)
    y[i] ~ dgamma(r,r/mu[i])
    #y[i] ~ dpois(mu[i])   # doesn't work (maybe put them in log scale) 
  }  
  
  r ~ dgamma(.05,.005) ## scale parameter prior 
  scale.daily.N <- 1/r ## convert r to standard GLM scale

  #scale.daily.N <- 1/tau.daily.N ## convert tau to standard GLM scale
  #tau.daily.N ~ dgamma(.05,.005) ## precision parameter prior 

  ## Parametric effect priors CHECK tau=1/2200^2 is appropriate!
  for (i in 1:1) { b[i] ~ dnorm(0,2e-07) }
  ## prior for s(days):year1... 
  K1 <- S1[1:9,1:9] * omega[1]  + S1[1:9,10:18] * omega[2]
  b[2:10] ~ dmnorm(zero[2:10],K1) 

  ## prior for s(days):year2... 
  K2 <- S2[1:9,1:9] * omega[3]  + S2[1:9,10:18] * omega[4]
  b[11:19] ~ dmnorm(zero[11:19],K2) 
  
  ## prior for s(days):year3... 
  K3 <- S3[1:9,1:9] * omega[5]  + S3[1:9,10:18] * omega[6]
  b[20:28] ~ dmnorm(zero[20:28],K3) 
  
  ## prior for s(days):year4... 
  K4 <- S4[1:9,1:9] * omega[7]  + S4[1:9,10:18] * omega[8]
  b[29:37] ~ dmnorm(zero[29:37],K4) 
  
  ## prior for s(days):year5... 
  K5 <- S5[1:9,1:9] * omega[9]  + S5[1:9,10:18] * omega[10]
  b[38:46] ~ dmnorm(zero[38:46],K5) 
  
  ## prior for s(days):year6... 
  K6 <- S6[1:9,1:9] * omega[11]  + S6[1:9,10:18] * omega[12]
  b[47:55] ~ dmnorm(zero[47:55],K6) 
  
  ## prior for s(days):year7... 
  K7 <- S7[1:9,1:9] * omega[13]  + S7[1:9,10:18] * omega[14]
  b[56:64] ~ dmnorm(zero[56:64],K7) 
  
  ## prior for s(days):year8... 
  K8 <- S8[1:9,1:9] * omega[15]  + S8[1:9,10:18] * omega[16]
  b[65:73] ~ dmnorm(zero[65:73],K8) 
  
  ## smoothing parameter priors CHECK...
  for (i in 1:16) {
    omega[i] ~ dgamma(.05,.005)
    rho[i] <- log(omega[i])
  }
    
  ### Summaries, Abundance Estimates, and Other Derived Quantities
  # new.X, col.idx, and t.start are in data. If I could figure out how to create
  # new.X within here, that'd make things a lot cleaner. 
  
  ## Seasonal Abundance Estimate:
  # I use the estimated b's above and the new data to 'predict' all data
  # gamma link is inverse. So, we have to anti-inverse
  for(t in 1:n.year){
    gam.fit[1:90, t] <- 1/(new.X[t.start[t]:(t.start[t]+89), col.idx[,t]] %*% b[col.idx[,t]])  

  }#t

  for (t in 1:n.year){
    raw.unrounded[t] <- sum(gam.fit[1:90,t])
    Raw.Est[t] <- round(raw.unrounded[t])
    Corrected.Est[t] <- Raw.Est[t]*corr.factor # multiply raw estimates by correction factor for nighttime passage rates (below)

  } 
  # Correction factor for nighttime passage rates:
  corr.factor~dnorm(mean.corr,tau.corr)
  mean.corr<-1.0875
  sd.corr<-0.03625
  tau.corr<-pow(sd.corr,-2)
  
}#model
