# This is a similar model to the original BUGS code except the normal distribution
# and the cut function are removed. Also, the maximum number of days is
# an input, rather than fixed at 90. Also, I changed it so that the secondary 
# station can have its own independent sighting data, not linked to the same 
# period as the primary station. Primary and secondary stations are treated independent. 
#
# This is for JAGS, not WinBUGS.

# 2024-03-20

model{ 
  
  # count i
  # station (Trailer) s
  # year t
    
  ### Linking Lambda from N Mixture to Spline Model
  # For Laake's dataset, they surveyed beyond day 90 (max is 95).
  # So, n.days needs to be defined for either (1) each year differently, (2) a larger number, 
  # e.g., 100, or (3) 90 if max day is < 90, but something else, e.g., 100, if > 90. 
  
  # sp (the number of whales) is defined for each day, whereas observed n is for each period. 
  # A period is a survey duration in which the sighting condition and observers were constant, 
  # up to 90 minutes.  
  #
  # The mean number of passing whales was proportional to the observation duration in proportion 
  # (max = 90 x 6 = 540 minutes per day).
  
  # lambda.1 and lambda.2 are the mean number of observable whales by station 1 and 2, respectively.  
  # the total number of whales in a day (sp) is multiplied (addition in the log space) by the 
  # proportion of the watch length.
  for(t in 1:n.year){
    for(j.1 in 1:(periods.1[t]+2)){
        
        log(lambda.1[j.1,t]) <- log(Watch.Length.1[j.1,t]) + sp[day.1[j.1,t], t]
    }#j.1
	
	for(j.2 in 1:(periods.2[t]+2)){
        
		# If there was no second station, return a very small negative number, which turns into
		# lambda.2 = 0
		log(lambda.2[j.2,t]) <- ifelse(Watch.Length.2[j.2, t] > 0, 
										log(Watch.Length.2[j.2,t]) + sp[day.2[j.2,t], t],
										-1000)
	}#j.2
	
  }#t
  
  ### N Mixture process
  # Primay and secondary observers are not always "on" at the same time. So, the number of periods
  # can be different between the stations. N is the number of observable whales, accounting for
  # the observation duration - see above lines watch.length x sp. sp is the number of whales for 
  # that day. N.1 and N.2 are different because watch durations are different between stations.
  for(t in 1:n.year){
    # Primary
	for(j.1 in 1:(periods.1[t])){ 
        # N mixture model - observations of 'observable' N (passing whales)
        n.1[j.1,t] ~ dbin(obs.prob.1[j.1,t], N.1[j.1,t]) 
		log.lkhd.1[j.1,t] <- logdensity.bin(n.1[j.1,t], obs.prob.1[j.1,t], N.1[j.1,t])
                            
	}#j.1
    
	# Secondary
	for(j.2 in 1:(periods.2[t])){
      
		# N mixture model - observations of 'observable' N (passing whales), 		
		n.2[j.2,t] ~ dbin(obs.prob.2[j.2,t], N.2[j.2,t]) 
		log.lkhd.2[j.2,t] <- logdensity.bin(n.2[j.2,t], obs.prob.2[j.2,t], N.2[j.2,t])

	}#j.2    
    
  }#t

  # The primary station always has equal or more periods than the secondary.		
  # With this formulation, even if the watch length is equal between the station, the
  # true N may be different between the stations because they are random deviates.
  for(t in 1:n.year){
    for(j.1 in 1:(periods.1[t]+2)){ 

		# The 'observable' N's from a given day are Poisson distributed with the mean whales per watch (lambda) 
		N.1[j.1,t] ~ dpois(lambda.1[j.1,t]) 

    }#j.1
	
	for(j.2 in 1:(periods.2[t]+2)){ 

		# The 'observable' N's from a given day are Poisson distributed with the mean whales per watch (lambda) 
		N.2[j.2,t] ~ dpois(lambda.2[j.2,t]) 

	}#j.2
	
  }#t
  
  ### Observation probability
  # Final obs prob = observer 1/0 * 
  #                (base obs prob + BF on/off *Fixed effect of BF * BF + 
  #                 VS on/off *Fixed effect of VS * VS    + 
  #                Obs effect on/off * Random effect of observer)

  # the u data is whether there were observers on watch (u.1 and u.2 for primary and secondary). 
  # 0 counts are often associated with years/shifts with 
  # no second observer. So if u=0, it will fix observation probability at 0
  
  for(t in 1:n.year){
    # Primary
	for(j.1 in 1:periods.1[t]){

        logit(prob.sp.1[j.1,t]) <- logit(mean.prob.sp.1) + (BF.Switch.sp.1[t] * BF.Fixed.sp.1[t] * bf.1[j.1,t]) + (VS.Switch.sp.1[t] * VS.Fixed.sp.1[t] * vs.1[j.1,t]) + (OBS.Switch.sp.1 * OBS.RF.sp[obs.1[j.1,t]])
        obs.prob.1[j.1,t] <- u.1[j.1,t] * prob.sp.1[j.1,t]
        
    }#j.1
	  
	# Secondary
	for (j.2 in 1:periods.2[t]){

		logit(prob.sp.2[j.2,t]) <- logit(mean.prob.sp.2) + (BF.Switch.sp.2[t] * BF.Fixed.sp.2[t] * bf.2[j.2,t]) + (VS.Switch.sp.2[t] * VS.Fixed.sp.1[t] * vs.2[j.2,t]) + (OBS.Switch.sp.2 * OBS.RF.sp[obs.2[j.2,t]])
		obs.prob.2[j.2,t] <- u.2[j.2,t] * prob.sp.2[j.2,t]
	   
	}#j.2
	
  }#t
  
  #Uninformative prior for mean.prob
  mean.prob.sp.1 ~ dunif(0,1)
  mean.prob.sp.2 ~ dunif(0,1)
  
  ### Specification of terms within observation probability linear model
  
  ## Observer random effect
  # SPECIFIC MODEL

  for(o in 1:n.obs){
    OBS.RF.sp[o] ~ dnorm(0, tau.Obs.sp)
  }#o
  
  # Uninformative prior for tau.Obs (I don't think Unif(0,2) to be uninformative... )
  sigma.Obs.sp ~ dgamma(1, 0.5)
  #sigma.Obs.sp ~ dunif(0,2)
  tau.Obs.sp <- pow(sigma.Obs.sp, -2)
  
  OBS.Switch.sp.1 ~ dbern(0.5)
  OBS.Switch.sp.2 ~ dbern(0.5)
  
  ## Beaufort
  #uninformative prior for the BF.Switch, which determines whether to include the effect of beaufort conditions (multiply by 0 or 1)
  for (t in 1:n.year){
    BF.Switch.sp.1[t] ~ dbern(0.5)
	BF.Switch.sp.2[t] ~ dbern(0.5)
  
	#Below is the single fixed effect multiplied by BF rating in the updated obs prob equation:
	BF.Fixed.sp.1[t] ~ dnorm(0,0.01)
	BF.Fixed.sp.2[t] ~ dnorm(0,0.01)
  
	## Visibility
	VS.Switch.sp.1[t] ~ dbern(0.5)
    VS.Switch.sp.2[t] ~ dbern(0.5)
	
	#Below is the single fixed effect multiplied by VS rating in the updated obs prob equation:
	VS.Fixed.sp.1[t] ~ dnorm(0,0.01)
	VS.Fixed.sp.2[t] ~ dnorm(0,0.01)
	
	# mean and sd of the time vector below
    mean.time.sp[t] <- mean(time.sp[1:n.days[t], t])
    sd.time.sp[t] <- sd(time.sp[1:n.days[t], t])
  }#t
  
  ### Seasonal Curve Models
  for(t in 1:n.year){
	for(d in 1:n.days[t]){ 
    
		time.sp[d,t] <- d
		# this makes a 'covariate', which is just a straight line
        covariate.sp[d,t]<-(time.sp[d,t]-mean.time.sp[t])/sd.time.sp[t] 

	}#d
  }#t

  ## spline fit Specific Model
  for(t in 1:n.year){  
    for(d in 1:n.days[t]){
      for(k in 1:n.knots){
        Z1[d,k,t] <- pow(uZ1[d,k,t], 1)
        uZ1[d,k,t] <- (covariate.sp[d,t] - knot[k]) * step(covariate.sp[d,t] - knot[k])
      }#k
    }#d
  }#t
  
  # this makes three vectors related to day 'd' - one a flat line, one a straight increasing line 
  for(t in 1:n.year){
	for(d in 1:n.days[t]){
		for (l in 1:2){
			
			X.sp[d,l,t] <- pow(covariate.sp[d,t], l-1) 
		}#l
    }#d
   }#t
    
  for(t in 1:n.year){  
    for(k in 1:n.knots){
      b.sp[k, t] ~ dnorm(0, tau.b.sp[t]) #annual regression coefficients for each spline knot
    }#k
    
    tau.b.sp[t] <- pow(sd.b.sp[t], -2)
    sd.b.sp[t] ~ dunif(0,10) #uniform prior on regression coefficient SD, as per Durban et al
  
    for(l in 1:2){
      beta.sp[l, t] ~ dnorm(0, 0.01) #N(0,10) prior for S0 and S1 coefficients, as per Durban et al
    }#l

  
    for(d in 1:n.days[t]){
      # multiplying splines across days to make the penalized spline model fit
      sp[d, t] <- inprod(beta.sp[,t], X.sp[d,,t]) + inprod(b.sp[,t], Z1[d,,t]) 
	  
	  # multiplying splines across days to make the penalized spline model fit
      # NOTE: Model is inverse-logged (exp) as below for the full season summation
      log(Specific[d,t]) <- sp[d,t]  

    }#d
  }#t
  
  ### Summaries, Abundance Estimates, and Other Derived Quantities
  
  ## Seasonal Abundance Estimate:
  for(t in 1:n.year){
    raw.unrounded[t] <- sum(Specific[1:n.days[t],t])
    Raw.Est[t] <- round(raw.unrounded[t])
    Corrected.Est[t] <- Raw.Est[t]*corr.factor # multiply raw estimates by correction factor for nighttime passage rates (below)
  }#t
  
  # Correction factor for nighttime passage rates:
  corr.factor~dnorm(mean.corr,tau.corr)
  mean.corr<-1.0875
  sd.corr<-0.03625
  tau.corr<-pow(sd.corr,-2)
  
  
}#model
    
