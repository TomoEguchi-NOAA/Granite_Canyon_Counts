# This is a similar model to the original BUGS code except the normal distribution
# and the use of cut function are removed. Also, the maximum number of days is
# an input, rather than fixed at 90. This is for JAGS, not WinBUGS.

# 2023-09-25

model{ 
  
  # count i
  # station (Trailer) s
  # year t
    
  ### Linking Lambda from N Mixture to Common Model
  # In the original model, day 1 and 90 were used to anchor the number of whales to be zero.
  # But this may not be the case... so, I decided to not anchor. This does not work... 
  # The anchoring is needed... For Laake's dataset, they surveyed beyond day 90 (max is 95).
  # So, n.days needs to be defined for either (1) each year differently, (2) a larger number, 
  # e.g., 100, or (3) 90 if max day is < 90, but something else, e.g., 100, if > 90. 
  
  for(t in 1:n.year){
    for(j in 1:(periods[t]+2)){
              
		log(lambda.sp[j,t]) <- log(Watch.Length[j,t]) + sp[day[j,t],t] #specific model daily lambda fit
        
    }#j
  }#t
  
  ### N Mixture process
  
  for(t in 1:n.year){
    for(j in 1:(periods[t])){ 
                            
      for(s in 1:n.station[t]){
      
        # N mixture model - two observations of 'true' N (passing whales), 
		# with different observation probabilities        
        n.sp[j,s,t] ~ dbin(obs.prob.sp[j,s,t], N.sp[j,t]) # N mixture model for specific model fit

      }#s    
    }#j
  }#t

  for(t in 1:n.year){
    for(j in 1:(periods[t]+2)){ 

      # Then, the 'true' N's from a given day are distributed around a poisson mean whales per watch (lambda) 
      N.sp[j,t] ~ dpois(lambda.sp[j,t]) 

    }#j
  }#t
  
  
  ### Observation probability
  for(t in 1:n.year){
    for(j in 1:periods[t]){
      for(s in 1:n.station[t]){

        # Final obs prob = observer 1/0 * 
        #                (base obs prob + BF on/off *Fixed effect of BF * BF + 
        #                 VS on/off *Fixed effect of VS * VS    + 
        #                Obs effect on/off * Random effect of observer)

        # the u data is whether there were observers on watch. 
        # 0 counts are often associated with years/shifts with 
        # no second observer. So if u=0, it will fix observation probability at 0
        
        # Spline (sp) model:
        logit(prob.sp[j,s,t]) <- logit(mean.prob.sp) + (BF.Switch.sp * BF.Fixed.sp * bf[j,t]) + (VS.Switch.sp * VS.Fixed.sp*vs[j,t]) + (OBS.Switch.sp * OBS.RF.sp[obs[j,s,t]])
        obs.prob.sp[j,s,t] <- u[j,s,t] * prob.sp[j,s,t]      
        
      }#s
    }#j
  }#t
  
  #Uninformative prior for mean.prob
  mean.prob.sp ~ dunif(0,1)
  
  ### Specification of terms within observation probability linear model
  
  ## Observer random effect
  # SPECIFIC MODEL

  for(o in 1:n.obs){
    OBS.RF.sp[o] ~ dnorm(0,tau.Obs.sp)
  }#o
  
  #Uninformative prior for tau.Obs
  sigma.Obs.sp ~ dunif(0,2)
  tau.Obs.sp <- pow(sigma.Obs.sp,-2)
  
  OBS.Switch.sp ~ dbern(0.5)

  ## Beaufort
  #uninformative prior for the BF.Switch, which determines whether to include the effect of beaufort conditions (multiply by 0 or 1)
  BF.Switch.sp ~ dbern(0.5)
  
  #Below is the single fixed effect multiplied by BF rating in the updated obs prob equation:
  BF.Fixed.sp ~ dnorm(0,0.01)
  
  ## Visibility
  VS.Switch.sp ~ dbern(0.5)
    
  #Below is the single fixed effect multiplied by VS rating in the updated obs prob equation:
  VS.Fixed.sp ~ dnorm(0,0.01)
  
   # mean and sd of the time vector below
  for(t in 1:n.year){
    mean.time.sp[t] <- mean(time.sp[1:n.days[t], t])
    sd.time.sp[t] <- sd(time.sp[1:n.days[t], t])
  }#t
  
  ### Seasonal Curve Models
  for(t in 1:n.year){
	for(d in 1:n.days[t]){ 
    
		time.sp[d,t] <- d
		# this makes a 'covariate', which is just a straight line
        covariate.sp[d,t]<-(time.sp[d,t]-mean.time.sp[t])/sd.time.sp[t] 

	}#d
  }#t

  ## Model 2, spline fit Specific Model
  for(t in 1:n.year){  
    for(d in 1:n.days[t]){
      for(k in 1:n.knots){
        Z1[d,k,t] <- pow(uZ1[d,k,t], 1)
        uZ1[d,k,t] <- (covariate.sp[d,t] - knot[k]) * step(covariate.sp[d,t] - knot[k])
      }#k
    }#d
  }#t
  
  for(t in 1:n.year){
	for(d in 1:n.days[t]){
		for (l in 1:2){
			# this makes three vectors related to day 'd' - one a flat line, one a straight increasing line 
			X.sp[d,l,t] <- pow(covariate.sp[d,t], l-1) 
		}#l
    }#d
   }#t
    
  for(t in 1:n.year){  
    for(k in 1:n.knots){
      b.sp[k, t] ~ dnorm(0, tau.b.sp[t]) #annual regression coefficients for each spline knot
    }#k
    
    tau.b.sp[t] <- pow(sd.b.sp[t], -2)
    sd.b.sp[t] ~ dunif(0,10) #uniform prior on regression coefficient SD, as per Durban et al
  
    for(l in 1:2){
      beta.sp[l, t] ~ dnorm(0, 0.01) #N(0,10) prior for S0 and S1 coefficients, as per Durban et al
    }#l

  
    for(d in 1:n.days[t]){
      # multiplying splines across days to make the penalized spline model fit
      sp[d, t] <- inprod(beta.sp[,t], X.sp[d,,t]) + inprod(b.sp[,t], Z1[d,,t]) 
	  
	  # multiplying splines across days to make the penalized spline model fit
      # NOTE: Model is inverse-logged (exp) as below for the full season summation
      log(Specific[d,t]) <- sp[d,t]  

    }#d
  }#t
  
  ### Summaries, Abundance Estimates, and Other Derived Quantities
  
  ## Seasonal Abundance Estimate:
  for(t in 1:n.year){
    raw.unrounded[t] <- sum(Specific[1:n.days[t],t])
    Raw.Est[t] <- round(raw.unrounded[t])
    Corrected.Est[t] <- Raw.Est[t]*corr.factor # multiply raw estimates by correction factor for nighttime passage rates (below)
  }#t
  
  # Correction factor for nighttime passage rates:
  corr.factor~dnorm(mean.corr,tau.corr)
  mean.corr<-1.0875
  sd.corr<-0.03625
  tau.corr<-pow(sd.corr,-2)
  
  
}#model
    
